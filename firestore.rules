
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Profiles Collection: Manages user-specific data.
    match /profiles/{userId} {
      
      // Allow any authenticated user to read profile data (e.g., for marketplace).
      allow read: if isSignedIn();

      // Allow a user to create their own profile document.
      // - The user must be creating their own profile.
      // - Validate initial data to prevent abuse.
      allow create: if request.auth.uid == userId
                    && request.resource.data.credits == 100
                    // && request.resource.data.reputation == 0
                    && request.resource.data.email == request.auth.token.email;

      // Allow a user to update their own profile, but only specific fields.
      // - User can only update their own document.
      // - Only 'display_name' and 'photo_url' can be changed.
      // - Important fields like 'credits', 'reputation', and 'email' are immutable here.
      allow update: if request.auth.uid == userId
                    && request.resource.data.keys().hasOnly(['id', 'email', 'display_name', 'photo_url', 'credits', 'reputation', 'created_at'])
                    && request.resource.data.id == resource.data.id
                    && request.resource.data.email == resource.data.email
                    && request.resource.data.credits == resource.data.credits
                    && request.resource.data.reputation == resource.data.reputation;
    }

    // Transactions Subcollection: Tracks credit usage for each user.
    match /profiles/{userId}/transactions/{transactionId} {
      // Deny all reads, updates, and deletes from the client.
      // Transaction history should be private and immutable.
      allow read, update, delete: if false;

      // Allow a user to create their own transaction log entries.
      // The secure credit deduction is handled by a Cloud Function, 
      // this rule just allows the log entry to be created.
      allow create: if request.auth.uid == userId;
    }

    // Tasks Collection: The public marketplace for tasks.
    match /tasks/{taskId} {
      // Any authenticated user can view (read, list) tasks.
      allow read: if isSignedIn();

      // Allow any authenticated user to create a new task.
      // The 'deductCredits' Cloud Function handles escrow, so we trust the client's input here
      // as long as the 'created_by' field matches the user's UID.
      allow create: if isSignedIn() 
                    && request.resource.data.created_by == request.auth.uid
                    && request.resource.data.status == 'OPEN';

      // Allow updates under specific, controlled conditions (state machine).
      allow update: if isSignedIn()
        // Case 1: Accepting a task
        && resource.data.status == 'OPEN' 
        && request.resource.data.status == 'ASSIGNED'
        && request.resource.data.assigned_to == request.auth.uid
        // Case 2: Completing a task (only the assignee can do this)
        || resource.data.status == 'ASSIGNED'
        && request.resource.data.status == 'COMPLETED'
        && resource.data.assigned_to == request.auth.uid
        // Case 3: Paying for a task (only the creator can do this, handled by cloud function)
        || resource.data.status == 'COMPLETED'
        && request.resource.data.status == 'PAID'
        && resource.data.created_by == request.auth.uid;
    }

    // Read-only collections for application data.
    match /credit_packs/{packId} {
      allow read: if isSignedIn();
      allow write: if false;
    }

    match /learning_modules/{moduleId} {
      allow read: if isSignedIn();
      allow write: if false;
    }

    match /mentors/{mentorId} {
      allow read: if isSignedIn();
      allow write: if false;
    }

    match /templates/{templateId} {
      allow read: if isSignedIn();
      allow write: if false;
    }
  }
}
