rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Read-only collections for app data
    match /(credit_packs|learning_modules|mentors|templates)/{docId} {
      allow read: if request.auth != null;
      allow write: if false; // Nobody can write from the client
    }

    // User Profiles
    match /profiles/{userId} {
      allow read: if request.auth != null;
      
      // A user can create their own profile upon signing up.
      // We validate the initial data to ensure fairness.
      allow create: if request.auth.uid == userId
                    && request.resource.data.credits == 100
                    && request.resource.data.reputation == 0
                    && request.resource.data.email == request.auth.token.email
                    && request.resource.data.id == request.auth.uid;

      // Updates are handled by the 'updateUserProfile' Cloud Function.
      // Direct client-side updates are disallowed to prevent tampering with credits/reputation.
      allow update: if false;
      allow delete: if false;

      // Transaction subcollection
      match /transactions/{transactionId} {
          // A user can only read their own transaction history.
          allow read: if request.auth.uid == userId;
          // Transaction logs are created by cloud functions, not clients.
          allow write: if false;
      }
    }

    // Tasks in the marketplace
    match /tasks/{taskId} {
      allow read: if request.auth != null;

      // Anyone can create a task if they are authenticated.
      // The cost is deducted via a Cloud Function, not validated here.
      allow create: if request.auth.uid == request.resource.data.created_by;

      // Task updates are state-machine based
      allow update: if request.auth != null &&
        // The creator can cancel an OPEN task
        (resource.data.status == 'OPEN' && request.resource.data.status == 'CANCELLED' && request.auth.uid == resource.data.created_by) ||
        // A user can accept an OPEN task
        (resource.data.status == 'OPEN' && request.resource.data.status == 'ASSIGNED' && request.auth.uid == request.resource.data.assigned_to) ||
        // The assignee can mark an ASSIGNED task as COMPLETED
        (resource.data.status == 'ASSIGNED' && request.resource.data.status == 'COMPLETED' && request.auth.uid == resource.data.assigned_to) ||
        // The creator approves a COMPLETED task, which is handled by the creditTransfer cloud function that sets status to PAID
        (resource.data.status == 'COMPLETED' && request.resource.data.status == 'PAID' && request.auth.uid == resource.data.created_by);
    }
  }
}
